{"version":3,"sources":["../lib/sntools.js"],"names":["SNTools","crypto","window","msCrypto","buf","Uint32Array","getRandomValues","idx","replace","c","r","v","toString","d","Date","getTime","performance","now","uuid","Math","random","floor","html","tmp","document","implementation","createHTMLDocument","body","innerHTML","textContent","innerText","string","type","xmlDoc","DOMParser","parser","parseFromString","ActiveXObject","async","loadXML","data","filename","textFile","makeTextFile","text","Blob","URL","revokeObjectURL","createObjectURL","file","JSON","stringify","link","createElement","setAttribute","href","appendChild","click","removeChild","stripHTML","defaultTagName","loadXMLString","xmlNotes","getElementsByTagName","notes","tags","defaultTag","generateUUID","content_type","content","title","references","findTag","filter","tag","addTag","push","xmlNote","childNodes","nodeValue","created","updatedNodes","updated","length","contentXmlString","contentXml","contentHTML","strip","note","created_at","moment","toDate","updated_at","setClientUpdatedAt","xmlTags","tagXml","tagName","allItems","concat","itemsData","items","rawNotes","el","contentElement","getElementsByClassName","e","console","log","name","isNaN","date","getDateFromGKeepNote","noteResult","withTitle","regex","dateString","exec","item","appData","files","completion","index","processedData","toLocaleDateString","readNext","reader","FileReader","onload","target","result","lastModified","split","bind","readAsText"],"mappings":"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","file":"transpiled.js","sourcesContent":["class SNTools {\n\n  generateUUID() {\n    var crypto = window.crypto || window.msCrypto;\n    if(crypto) {\n      var buf = new Uint32Array(4);\n      crypto.getRandomValues(buf);\n      var idx = -1;\n      return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n          idx++;\n          var r = (buf[idx>>3] >> ((idx%8)*4))&15;\n          var v = c == 'x' ? r : (r&0x3|0x8);\n          return v.toString(16);\n      });\n    } else {\n      var d = new Date().getTime();\n      if(window.performance && typeof window.performance.now === \"function\"){\n        d += performance.now(); //use high-precision timer if available\n      }\n      var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n        var r = (d + Math.random()*16)%16 | 0;\n        d = Math.floor(d/16);\n        return (c=='x' ? r : (r&0x3|0x8)).toString(16);\n      });\n      return uuid;\n    }\n  }\n\n  strip(html) {\n     var tmp = document.implementation.createHTMLDocument(\"New\").body;\n     tmp.innerHTML = html;\n     return tmp.textContent || tmp.innerText || \"\";\n  }\n\n  loadXMLString(string, type) {\n    var xmlDoc;\n    if (window.DOMParser) {\n      var parser = new DOMParser();\n      xmlDoc = parser.parseFromString(string, \"text/\" + type);\n    } else {\n      // Internet Explorer\n      xmlDoc = new ActiveXObject(\"Microsoft.XMLDOM\");\n      xmlDoc.async = false;\n      xmlDoc.loadXML(string);\n    }\n\n    return xmlDoc;\n  }\n\n  downloadSNData(data, filename) {\n    var textFile = null;\n    var makeTextFile = function (text) {\n      var data = new Blob([text], {type: 'text/json'});\n\n      // If we are replacing a previously generated file we need to\n      // manually revoke the object URL to avoid memory leaks.\n      if (textFile !== null) {\n        window.URL.revokeObjectURL(textFile);\n      }\n\n      textFile = window.URL.createObjectURL(data);\n\n      // returns a URL you can use as a href\n      return textFile;\n    }\n\n    var file = makeTextFile(JSON.stringify(data, null, 2 /* pretty print */));\n\n    var link = document.createElement('a');\n    link.setAttribute('download', filename);\n    link.href = file;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  }\n\n  convertENEXDatatoSN(data, stripHTML = false, defaultTagName = \"evernote\") {\n    var xmlDoc = this.loadXMLString(data, \"xml\");\n    var xmlNotes = xmlDoc.getElementsByTagName(\"note\");\n    var notes = [];\n    var tags = [];\n    var defaultTag;\n\n    if(defaultTagName) {\n      defaultTag = {\n        uuid: this.generateUUID(),\n        content_type: \"Tag\",\n        content: {\n          title: defaultTagName,\n          references: []\n        }\n      };\n    }\n\n    function findTag(title) {\n      return tags.filter(function(tag){\n        return tag.content.title == title;\n      })[0];\n    }\n\n    function addTag(tag) {\n      tags.push(tag);\n    }\n\n    for(var xmlNote of xmlNotes) {\n      var title = xmlNote.getElementsByTagName(\"title\")[0].childNodes[0].nodeValue;\n      var created = xmlNote.getElementsByTagName(\"created\")[0].childNodes[0].nodeValue;\n      var updatedNodes = xmlNote.getElementsByTagName(\"updated\");\n      var updated = updatedNodes.length ? updatedNodes[0].childNodes[0].nodeValue : null;\n\n      var contentXmlString = xmlNote.getElementsByTagName(\"content\")[0].childNodes[0].nodeValue;\n      var contentXml = this.loadXMLString(contentXmlString, \"html\");\n      var contentHTML = contentXml.getElementsByTagName(\"en-note\")[0].innerHTML;\n      if(stripHTML) {\n        contentHTML = contentHTML.replace(/<br[^>]*>/g, \"\\n\\n\");\n        contentHTML = contentHTML.replace(/<li[^>]*>/g, \"\\n\");\n      }\n      var text = stripHTML ? this.strip(contentHTML) : contentHTML;\n\n      var note = {\n        created_at: moment(created).toDate(),\n        updated_at: updated ? moment(updated).toDate() : moment(created).toDate(),\n        uuid: this.generateUUID(),\n        content_type: \"Note\",\n        content: {\n          title: title,\n          text: text,\n          references: [],\n        }\n      };\n\n      this.setClientUpdatedAt(note, note.updated_at);\n\n      if(defaultTag) {\n        defaultTag.content.references.push({\n          content_type: \"Note\",\n          uuid: note.uuid\n        })\n      }\n\n      var xmlTags = xmlNote.getElementsByTagName(\"tag\");\n      for(var tagXml of xmlTags) {\n        var tagName = tagXml.childNodes[0].nodeValue;\n        var tag = findTag(tagName);\n        if(!tag) {\n          tag = {\n            uuid: this.generateUUID(),\n            content_type: \"Tag\",\n            created_at: new Date(),\n            updated_at: new Date(),\n            content: {\n              title: tagName,\n              references: []\n            }\n          }\n          addTag(tag);\n        }\n\n        note.content.references.push({content_type: tag.content_type, uuid: tag.uuid})\n        tag.content.references.push({content_type: note.content_type, uuid: note.uuid})\n      }\n\n      notes.push(note);\n    }\n\n    var allItems = notes.concat(tags);\n    if(defaultTag) {\n      allItems.push(defaultTag);\n    }\n\n    var itemsData = {\n      items: allItems\n    }\n\n    return itemsData;\n  }\n\n  convertGKeepNotes(rawNotes, stripHTML = false) {\n    // Final notes array\n    let notes = [];\n\n    for (let note of rawNotes) {\n      // Parse note html\n      let el = document.createElement('html');\n      el.innerHTML = note.content;\n\n      // Try to get note content\n      let content;\n      try {\n        let contentElement = el.getElementsByClassName('content')[0];\n\n        // Replace <br> with \\n so line breaks get recognised\n        contentElement.innerHTML = contentElement.innerHTML.replace(/<br>/g, \"\\n\");\n\n        // Get note content, removing newline from todo lists\n        if(stripHTML) {\n          content = contentElement.innerText.replace(/☐\\n/g, '☐').replace(/☑\\n/g, '☑');\n        } else {\n          content = contentElement.innerHTML;\n        }\n      } catch(e) {\n        // Invalid note, continue\n        console.log(note.name, \"is an invalid note (no content)\");\n        continue;\n      }\n\n      // Try to get note title\n      let title;\n      try {\n        title = el.getElementsByTagName('title')[0].innerText;\n      } catch(e) {\n        // Invalid note, continue\n        console.log(note.name, \"is an invalid note (no title)\");\n        continue;\n      }\n\n      // Check if title is date (default if no title is set). If so, use empty string\n      if (title !== '' && !isNaN(new Date(title))) {\n        title = '';\n      }\n\n      // Try to find creation date, usually before div.content or div.title\n      const date =\n        this.getDateFromGKeepNote(true, note.content) || \n        this.getDateFromGKeepNote(false, note.content) ||\n        new Date();\n\n      let noteResult = {\n        created_at: date,\n        updated_at: date,\n        uuid: this.generateUUID(),\n        content_type: 'Note',\n        content: {\n          title,\n          text: content,\n          references: [],\n        },\n      }\n\n      this.setClientUpdatedAt(noteResult, date);\n      notes.push(noteResult);\n    }\n    return {\n      \"items\": notes\n    }\n  }\n  getDateFromGKeepNote(withTitle, note) {\n    let regex;\n    if (withTitle) {\n      regex = /.*(?=<\\/div>\\n<div class=\"title\">)/;\n    } else {\n      regex = /.*(?=<\\/div>\\n\\n<div class=\"content\">)/;\n    }\n    const dateString = regex.exec(note);\n    // Check if string exists at all\n    if (dateString && dateString[0]) {\n      // Check if string is valid date\n      if (!isNaN(new Date(dateString))) {\n        return new Date(dateString);\n      }\n    }\n    return false;\n  }\n\n  setClientUpdatedAt(item, date) {\n    item.content.appData = {\n      \"org.standardnotes.sn\": {\n        \"client_updated_at\": date\n      }\n    }\n  }\n\n  convertPlaintextFiles(files, completion) {\n    var index = 0;\n    var processedData = [];\n\n    const dateString = new Date().toLocaleDateString().replace(/\\//g, '-');\n    const defaultTag = {\n      uuid: this.generateUUID(),\n      content_type: \"Tag\",\n      content: {\n        title: `${dateString}-import`,\n        references: []\n      }\n    };\n    processedData.push(defaultTag);\n\n    var readNext = function() {\n      var file = files[index];\n      index++;\n      var reader = new FileReader();\n\n      reader.onload = function(e) {\n        var data = e.target.result;\n        var note = {\n          created_at: new Date(file.lastModified),\n          updated_at: new Date(file.lastModified),\n          uuid: this.generateUUID(),\n          content_type: \"Note\",\n          content: {\n            title: file.name.split(\".\")[0],\n            text: data,\n            references: [],\n          }\n        };\n        this.setClientUpdatedAt(note, note.updated_at);\n        processedData.push(note);\n        defaultTag.content.references.push({\n          content_type: \"Note\",\n          uuid: note.uuid\n        })\n\n        if(index < files.length) {\n          readNext();\n        } else {\n          completion({items: processedData});\n        }\n      }.bind(this)\n      reader.readAsText(file);\n    }.bind(this);\n\n    readNext();\n  }\n}\n\nwindow.SNTools = new SNTools()\n"]}